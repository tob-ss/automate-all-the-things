name: deploy-argocd

trigger: none

variables:
  - group: aws-keys
  - name: AWS_REGION
    value: eu-north-1 # This value was modified by the initial-setup python script
  - name: APP_NAME
    value: SeizeTheMeans # This value was modified by the initial-setup python script
    
pool:
  vmImage: 'ubuntu-latest' 
  # If you are using a self-hosted agent, comment out the previous line and uncomment the following three
  # name: <agent-pool-name> # Insert here the name of the agent pool you created
  # demands:
  #   - agent.name -equals <agent-name> # Insert here the name of the agent you created


steps:
- task: HelmInstaller@0
  inputs:
    displayName: Install helm
    helmVersion: '3.11.2'
    installKubectl: true

- script: | 
    mkdir ~/.aws
    echo -e "[default]\naws_access_key_id = $(aws_access_key_id)\naws_secret_access_key = $(aws_secret_access_key)" > ~/.aws/credentials
    echo -e "[default]\nregion = $(AWS_REGION)"> ~/.aws/config 
  displayName: 'Configure AWS Profile'

- task: AWSCLI@1
  displayName: 'Update KubeConfig'
  inputs:
    awsCredentials: 'aws'
    regionName: '$(AWS_REGION)' 
    awsCommand: 'eks'
    awsSubCommand: 'update-kubeconfig'
    awsArguments: '--name $(APP_NAME)-cluster --region $(AWS_REGION)' 

- script: | 
    helm install argocd -n argocd helm/argo-cd --values helm/argo-cd/values-custom.yaml --dependency-update --create-namespace
  displayName: 'Deploy ArgoCD'

- script: |
    while [[ $(kubectl -n argocd get ingress argocd-server -o 'jsonpath={.status.loadBalancer.ingress[0].hostname}') == '' ]]; do
      echo "Ingress is not ready. Checking again in 5 seconds..."
      sleep 5
    done
    kubectl get ingress -n argocd argocd-server -o=jsonpath="{'http://'}{.status.loadBalancer.ingress[].hostname}{'\n'}" > argocd-access.txt
    echo "admin" >> argocd-access.txt
    while [[ $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}") == '' ]]; do
      echo "Secret is not ready. Checking again in 5 seconds..."
      sleep 5
    done
    echo $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d) >> argocd-access.txt
  displayName: 'Get Access'

- task: PublishBuildArtifacts@1
  displayName: 'Export Access'
  inputs:
    PathtoPublish: 'argocd-access.txt'
    ArtifactName: 'Access'
    publishLocation: 'Container'

- script: |
    kubectl create -n argocd -f $(Agent.BuildDirectory)/s/argo-cd/backend/application-dev.yaml
    kubectl create -n argocd -f $(Agent.BuildDirectory)/s/argo-cd/backend/application-stage.yaml
    kubectl create -n argocd -f $(Agent.BuildDirectory)/s/argo-cd/backend/application-prod.yaml
    kubectl create -n argocd -f $(Agent.BuildDirectory)/s/argo-cd/frontend/application-dev.yaml
    kubectl create -n argocd -f $(Agent.BuildDirectory)/s/argo-cd/frontend/application-stage.yaml
    kubectl create -n argocd -f $(Agent.BuildDirectory)/s/argo-cd/frontend/application-prod.yaml
  displayName: 'Create ArgoCD application resources'
